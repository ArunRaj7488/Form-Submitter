{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Button/Button.js","utils/isEmpty.js","validation/validate.js","config/index.js","axios.js","components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","inputElement","elementType","react_default","a","createElement","type","onBlur","event","onChange","id","className","placeholder","htmlFor","label","isValid","touched","style","display","message","Button","onSubmit","join","children","isEmpty","value","undefined","trim","length","validateInputFeild","config","required","test","console","log","dob","Date","age","getFullYear","BASE_URL","instance","axios","create","baseURL","headers","Content-Type","timeout","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","formChangeHandler","element","_this$setState","formElements","objectSpread","state","form","felidElement","target","_validateInputFeild","validations","validationFailMessage","setState","defineProperty","formSumbitHandler","preventDefault","data","isFormValid","key","feild","validation","reset","API","post","then","response","status","statusText","sentStatus","catch","error","name","email","phoneNumber","_this2","alertClass","formElement","push","role","map","UI_Input_Input","UI_Button_Button","Component","App","BrowserRouter","Switch","Route","exact","path","render","margin","Link","fontSize","to","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4XAkCeA,SA7BD,SAACC,GACX,IAAIC,EAAe,KACnB,OAAOD,EAAME,aACT,IAAK,QACDD,EAAeE,EAAAC,EAAAC,cAAA,SACfC,KAAON,EAAMM,KACbC,OAAQ,SAACC,GAAD,OAAWR,EAAMS,SAASD,EAAOR,EAAMU,KAC/CC,UAAU,eACVD,GAAIV,EAAMU,GACVE,YAAaZ,EAAMY,cACvB,MACA,IAAK,OACDX,EAAeE,EAAAC,EAAAC,cAAA,SAAOC,KAAMN,EAAMM,KAAMK,UAAU,qBAAqBD,GAAIV,EAAMU,KAMzF,OACIP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,cACfR,EAAAC,EAAAC,cAAA,SAAOM,UAAU,QAAQE,QAASb,EAAMU,IAAKV,EAAMc,OAClDb,GACCD,EAAMe,SAAWf,EAAMgB,SAAWb,EAAAC,EAAAC,cAAA,QAAMM,UAAU,mBAAmBM,MAAO,CAACC,QAAU,WAAY,OAAQlB,EAAMmB,YCd5GC,SARA,SAACpB,GAEZ,OACIG,EAAAC,EAAAC,cAAA,UAAQgB,SAAUrB,EAAMqB,SAAUf,KAAMN,EAAMM,KAAMK,UAAW,CAAC,CAAC,MAAMX,EAAMW,WAAWW,KAAK,KAAM,OAAOA,KAAK,MAC9GtB,EAAMuB,YCDAC,EAJC,SAAAC,GAAK,OACK,OAAVA,QAA4BC,IAAVD,GACA,kBAAVA,GAA8C,IAAxBA,EAAME,OAAOC,QC+C5CC,EAlDY,SAASC,EAAQL,GAExC,IAAIN,EAAU,GACVJ,GAAU,EAId,GAAGe,EAAOC,UAAYP,EAAQC,GAEtB,MAAO,CAAEN,QAAS,wBAAyBJ,SAAU,GAKzD,GAAmB,UAAhBe,EAAOxB,KAKN,OAJAS,EAAU,sHAAsHiB,KAAKP,IAAUV,KAE3II,EAAU,iBAER,CAACJ,QAAUA,EAASI,QAAUA,GAIxC,GAAmB,QAAhBW,EAAOxB,KAAe,CACrB2B,QAAQC,IAAIT,GACZ,IAAIU,EAAM,IAAIC,KAAKX,GAEfY,GADQ,IAAID,MACAE,cAAgBH,EAAIG,cAEhC,GADAL,QAAQC,IAAIG,GACTA,GAAO,GAGN,OAFAlB,EAAU,8CACVJ,GAAU,EACPsB,EAAM,EACE,CAACtB,SAAU,EAAOI,QAAU,iBAE/B,CAACJ,QAAUA,EAASI,QAAU,gDAKlD,MAAM,CACFA,UAASJ,oBCxCNe,EAJA,CACXS,SAAW,wCCYAC,SAREC,EAAMC,OAAO,CAC1BC,QAAQb,EAAOS,SACfK,QAAQ,CACJC,eAAe,oBAEnBC,QAAQ,MC0KGC,qBA3KX,SAAAA,EAAY/C,GAAM,IAAAgD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMnD,KAqEVuD,kBAAoB,SAAC/C,EAAOgD,GAAU,IAAAC,EAK9BC,EAAYT,OAAAU,EAAA,EAAAV,CAAA,GAAOD,EAAKY,MAAMC,MAC9BC,EAAeJ,EAAaF,GAChCM,EAAarC,MAAQjB,EAAMuD,OAAOtC,MAPA,IAAAuC,EAQTnC,EAAmBiC,EAAaG,YAAYH,EAAarC,OAA7EV,EAR6BiD,EAQ7BjD,QAASI,EARoB6C,EAQpB7C,QACd2C,EAAaG,YAAYlD,QAAUA,EACnC+C,EAAaG,YAAYC,sBAAwB/C,EACjD2C,EAAa9C,SAAU,EACvBgC,EAAKmB,UAALV,EAAA,GAAAR,OAAAmB,EAAA,EAAAnB,CAAAQ,EAAgBC,EAAgBI,GAAhCb,OAAAmB,EAAA,EAAAnB,CAAAQ,EAAA,UAAwD,IAAxDA,KAlFcT,EAsFlBqB,kBAAoB,SAAC7D,GACjBA,EAAM8D,iBAEN,IAAIT,EAAIZ,OAAAU,EAAA,EAAAV,CAAA,GAAOD,EAAKY,MAAMC,MACtBU,EAAO,GACPC,GAAc,EAClB,IAAI,IAAIC,KAAOZ,EAAK,CAChB,IAAIa,EAAKzB,OAAAU,EAAA,EAAAV,CAAA,GAAOY,EAAKY,IAGrBF,EAAKE,GAAOC,EAAMjD,MAGlB,IAAIkD,EAAU1B,OAAAU,EAAA,EAAAV,CAAA,GAAOyB,EAAMT,aACvBU,EAAW5D,UACXyD,EAAcG,EAAW5D,SAG7BkB,QAAQC,IAAIsC,GAEbA,GACChE,EAAMuD,OAAOa,QAEb3C,QAAQC,IAAIqC,GACZM,EAAIC,KAAK,aAAaP,GACrBQ,KAAK,SAACC,GACH,IAAIT,EAAOS,EAAST,KACG,MAApBS,EAASC,QAA0C,OAAxBD,EAASE,WACnClC,EAAKmB,SAAS,CAAChD,QAAUoD,EAAKpD,QAASgE,YAAa,IAEpDnC,EAAKmB,SAAS,CAAChD,QAAUoD,EAAKpD,YAGrCiE,MAAM,SAACC,GACJpD,QAAQC,IAAImD,MAMhBrC,EAAKmB,SAAS,CAAChD,QAAU,qBA5H7B6B,EAAKY,MAAQ,CACTC,KAAO,CACHyB,KAAO,CACHpF,YAAc,QACdI,KAAM,OACNM,YAAc,aACdE,MAAQ,OACRW,MAAQ,GACRwC,YAAc,CACVC,sBAAwB,GACxBnD,SAAU,EACVgB,UAAW,EACXzB,KAAO,SAGfiF,MAAQ,CACJrF,YAAc,QACdI,KAAM,QACNM,YAAc,sBACda,MAAQ,GACRX,MAAQ,QACRmD,YAAc,CACVC,sBAAwB,GACxBnD,SAAU,EACVgB,UAAW,EACXzB,KAAO,UAGf6B,IAAM,CACFjC,YAAc,QACdI,KAAM,OACNM,YAAc,aACda,MAAQ,GACRX,MAAQ,SACRmD,YAAc,CACVC,sBAAwB,GACxBnD,SAAU,EACVgB,UAAW,EACXzB,KAAO,QAGfkF,YAAY,CACRtF,YAAc,QACdI,KAAM,OACNM,YAAc,oBACda,MAAQ,GACRX,MAAQ,eACRE,SAAU,EACViD,YAAc,CACVC,sBAAwB,GACxBnD,SAAU,EACVgB,UAAW,EACXzB,KAAO,iBAQnBa,QAAU,GAGVgE,YAAa,GAjEHnC,wEAkIV,IAAAyC,EAAAtC,KAEAU,EAAOV,KAAKS,MAAMC,KAClB1C,EAASgC,KAAKS,MAAMzC,QACpBuE,EAAa,GACjBA,EAAa,8BAGS,IAAnBvE,EAAQS,SACP8D,EAAa,QAGjB,IAAIC,EAAc,GAClB,IAAK,IAAIlB,KAAOZ,EACZ8B,EAAYC,KAAK,CAAClF,GAAK+D,EAAKhD,MAAQoC,EAAKY,KAE7C,OACItE,EAAAC,EAAAC,cAAA,OAAKM,UAAU,4BACdR,EAAAC,EAAAC,cAAA,OAAKM,UAAW+E,EAAaG,KAAK,SAClC1E,GAEDhB,EAAAC,EAAAC,cAAA,QAAMM,UAAU,OAAOU,SAAY,SAACb,GAASiF,EAAKpB,kBAAkB7D,KACnEmF,EAAYG,IAAI,SAACH,GACd,OAAOxF,EAAAC,EAAAC,cAAC0F,EAAD,CAAOtB,IAAKkB,EAAYlE,MAAMX,MACrCA,MAAO6E,EAAYlE,MAAMX,MACzBJ,GAAIiF,EAAYlE,MAAMwC,YAAY3D,KAClCJ,YAAayF,EAAYlE,MAAMvB,YAC/BI,KAAMqF,EAAYlE,MAAMnB,KACxBG,SAAUgF,EAAKlC,kBACfxC,QAAS4E,EAAYlE,MAAMwC,YAAYlD,QACvCC,QAAS2E,EAAYlE,MAAMT,QAC3BG,QAASwE,EAAYlE,MAAMwC,YAAYC,sBACvCtD,YAAa+E,EAAYlE,MAAMb,gBAEnCT,EAAAC,EAAAC,cAAC2F,EAAD,CAAQrF,UAAU,UAAUL,KAAK,UAAjC,mBArKO2F,cCcJC,mLAdX,OACE/F,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACfR,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,KACEhG,EAAAC,EAAAC,cAAC+F,EAAA,EAAD,KACAjG,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAClBC,OAAQ,kBAAIrG,EAAAC,EAAAC,cAAA,OAAKY,MAAO,CAACwF,OAAS,UAAUtG,EAAAC,EAAAC,cAAA,+BAA0BF,EAAAC,EAAAC,cAACqG,EAAA,EAAD,CAAMzF,MAAO,CAAC0F,SAAW,QAASC,GAAG,cAArC,kBACtEzG,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,aAAaM,UAAW9D,cARhCkD,aCMEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASX,OAAOrG,EAAAC,EAAAC,cAAC+G,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.9bd9610b.chunk.js","sourcesContent":["\r\nimport React, {Component} from 'react'\r\nimport './Input.css'\r\n\r\n\r\nconst Input = (props)=>{\r\n    var inputElement = null;\r\n    switch(props.elementType){\r\n        case 'input':\r\n            inputElement = <input \r\n            type= {props.type}  \r\n            onBlur={(event) => props.onChange(event, props.id)} \r\n            className=\"form-control\" \r\n            id={props.id} \r\n            placeholder={props.placeholder}/>\r\n        break\r\n        case 'date' : \r\n            inputElement = <input type={props.type} className=\"form-control-range\" id={props.id}/>\r\n        \r\n        break\r\n        default :\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-group\">\r\n        <label className='label' htmlFor={props.id}>{props.label}</label>\r\n        {inputElement}\r\n        {!props.isValid && props.touched && <span className=\"invalid-feedback\" style={{display : 'inline'}}>{'!!! '+ props.message}</span>}\r\n        </div>\r\n    )\r\n    \r\n    }\r\n\r\n\r\nexport default Input","\r\n\r\nimport React from 'react'\r\nimport './Button.css'\r\n\r\nconst Button = (props)=>{\r\n\r\n    return(\r\n        <button onSubmit={props.onSubmit} type={props.type} className={[[\"btn\",props.className].join('-'), \"btn\"].join(\" \")}>\r\n        {props.children}</button>\r\n    )\r\n}\r\n\r\nexport default Button;","\r\n\r\n\r\n//checking for null, undefined, empty string\r\nconst isEmpty = value => \r\n                value === null || value === undefined ||\r\n                (typeof value === 'string' && value.trim().length === 0);\r\n\r\nexport default isEmpty","\r\nimport isEmpty from '../utils/isEmpty'\r\n\r\nconst validateInputFeild = function(config, value){\r\n\r\n    var message = ''\r\n    var isValid = true;\r\n    \r\n    //checking for empty and null values\r\n    \r\n    if(config.required && isEmpty(value)){\r\n\r\n            return { message: 'Feild cannot be empty', isValid : false}\r\n\r\n        }\r\n            \r\n        //checking email\r\n        if(config.type === 'email'){\r\n            isValid = /^([a-zA-Z0-9_\\-.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/.test(value) && isValid;\r\n            if(!isValid){\r\n                message = 'Invalid Email'\r\n            }\r\n            return{isValid : isValid, message : message}\r\n        }\r\n\r\n        //checking dob\r\n        if(config.type === 'dob'){\r\n            console.log(value)\r\n            var dob = new Date(value)\r\n            var today = new Date();\r\n            var age = today.getFullYear() - dob.getFullYear();\r\n                console.log(age)\r\n                if(age <= 18 ){\r\n                    message = 'Age should be equl to or more than 18 years'\r\n                    isValid = false\r\n                    if(age < 0){\r\n                        return {isValid : false, message : ' Invalid date'}\r\n                    }\r\n                    return  {isValid : isValid, message : 'Age should be equal to or more than 18 years'}\r\n                }\r\n                \r\n        }\r\n\r\n        return{\r\n            message, isValid\r\n        }\r\n}\r\n\r\n    \r\n\r\n    \r\n\r\n\r\nexport default validateInputFeild","const config = {\r\n    BASE_URL : 'https://usersampleapp.herokuapp.com/'\r\n}\r\n\r\nexport default config","\r\nimport axios from 'axios';\r\nimport config from './config';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL:config.BASE_URL,\r\n    headers:{\r\n        'Content-Type':'application/json'\r\n    },\r\n    timeout:50000//10s max time out for now\r\n});\r\n\r\nexport default instance","import React,{Component} from 'react'\r\nimport Input from '../UI/Input/Input'\r\nimport Button from '../UI/Button/Button'\r\nimport validateInputFeild from '../../validation/validate'\r\nimport API from '../../axios' \r\nimport './Form.css'\r\n\r\n\r\nclass Form extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            form : {\r\n                name : {\r\n                    elementType : 'input',\r\n                    type: 'text',\r\n                    placeholder : 'Enter Name',\r\n                    label : 'Name',\r\n                    value : '',\r\n                    validations : {\r\n                        validationFailMessage : '',\r\n                        isValid : false,\r\n                        required : true,\r\n                        type : 'name'\r\n                    }\r\n                },\r\n                email : {\r\n                    elementType : 'input',\r\n                    type: 'email',\r\n                    placeholder : 'e.g. : abc@mail.com',\r\n                    value : '',\r\n                    label : 'Email',\r\n                    validations : {\r\n                        validationFailMessage : '',\r\n                        isValid : false,\r\n                        required : true,\r\n                        type : 'email'\r\n                    }\r\n                },\r\n                dob : {\r\n                    elementType : 'input',\r\n                    type: 'date',\r\n                    placeholder : 'yyyy-mm-dd',\r\n                    value : '',\r\n                    label : 'D.O.B.',\r\n                    validations : {\r\n                        validationFailMessage : '',\r\n                        isValid : false,\r\n                        required : true,\r\n                        type : 'dob'\r\n                    }\r\n                },\r\n                phoneNumber:{\r\n                    elementType : 'input',\r\n                    type: 'text',\r\n                    placeholder : 'e.g. : 9876543210',\r\n                    value : '',\r\n                    label : 'Phone Number',\r\n                    touched : false,\r\n                    validations : {\r\n                        validationFailMessage : '',\r\n                        isValid : false,\r\n                        required : true,\r\n                        type : 'phoneNumber'\r\n                    }\r\n                }\r\n            },\r\n\r\n            //message for user on invalid input,\r\n            //successfull submission and\r\n            //duplicate user\r\n            message : '',\r\n\r\n            //change when data is sent\r\n            sentStatus : false\r\n\r\n        }\r\n    }\r\n\r\n    formChangeHandler = (event, element)=>{\r\n\r\n        //fetching the value from input feild,\r\n        //performing validation for evry value\r\n        // updating state accordingly \r\n        var formElements = {...this.state.form}\r\n        var felidElement = formElements[element]\r\n        felidElement.value = event.target.value\r\n        var {isValid, message} = validateInputFeild(felidElement.validations,felidElement.value)\r\n        felidElement.validations.isValid = isValid\r\n        felidElement.validations.validationFailMessage = message\r\n        felidElement.touched = true        \r\n        this.setState({[formElements] : felidElement, message : \"\" })   \r\n\r\n    }\r\n    \r\n    formSumbitHandler = (event)=>{\r\n        event.preventDefault()\r\n        \r\n        var form = {...this.state.form}\r\n        var data = {}\r\n        var isFormValid = true\r\n        for(var key in form){\r\n            var feild = {...form[key]}\r\n\r\n            //preparing obj to be sent on request\r\n            data[key] = feild.value\r\n\r\n            //checking validity for overall form\r\n            var validation = {...feild.validations}\r\n            if(!validation.isValid){\r\n                isFormValid = validation.isValid\r\n            }\r\n        }\r\n            console.log(isFormValid)\r\n\r\n        if(isFormValid){\r\n            event.target.reset();\r\n            //send request to server form is valid\r\n            console.log(data)\r\n            API.post('/user-form',data)\r\n            .then((response)=>{\r\n                var data = response.data\r\n                if(response.status === 200 && response.statusText === 'OK'){\r\n                    this.setState({message : data.message, sentStatus : true})\r\n                }else{\r\n                    this.setState({message : data.message})\r\n                }\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error)\r\n            })\r\n        }else{\r\n\r\n            //if any of the feild is empty and user\r\n            //force to submit then send this message\r\n            this.setState({message : 'Invalid Details'})\r\n        }    \r\n    }\r\n\r\n    render(){\r\n         \r\n        var form = this.state.form\r\n        var message =this.state.message\r\n        var alertClass = ''\r\n        alertClass = 'alert-success alert message'\r\n\r\n        //hide, if no message\r\n        if(message.length === 0){\r\n            alertClass = 'hide'\r\n        }\r\n        \r\n        var formElement = [];\r\n        for( var key in form){\r\n            formElement.push({id : key, value : form[key]})\r\n        }\r\n        return(\r\n            <div className='container col-md-6 cover'>\r\n            {<div className={alertClass}  role=\"alert\">\r\n            {message}\r\n          </div>}\r\n            <form className='form' onSubmit = {(event)=>{this.formSumbitHandler(event)}}>\r\n            {formElement.map((formElement)=>{\r\n                return <Input key={formElement.value.label}\r\n                label={formElement.value.label} \r\n                id={formElement.value.validations.type}\r\n                elementType={formElement.value.elementType} \r\n                type={formElement.value.type} \r\n                onChange={this.formChangeHandler} \r\n                isValid={formElement.value.validations.isValid} \r\n                touched={formElement.value.touched}\r\n                message={formElement.value.validations.validationFailMessage}\r\n                placeholder={formElement.value.placeholder}></Input>\r\n            })}\r\n            <Button className='primary' type='Submit'>SUBMIT</Button> \r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form\r\n","import React, { Component } from 'react';\r\nimport {BrowserRouter, Switch, Route, Link} from 'react-router-dom'\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Form from '../src/components/Form/Form'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Switch>\r\n        <Route exact path='/' \r\n        render={()=><div style={{margin : '200px'}}><h1>Welcome to Sample</h1><Link style={{fontSize : '30px'}} to='/user-form'>Go to Form</Link></div>} />\r\n        <Route exact path='/user-form' component={Form} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}